
    // pos, texcoords
    const float pos[] = {
        -1.0f, -1.0f, 0.0f, 0.0f,
        1.0f, -1.0f, 1.0f, 0.0f,
        1.0f, 1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f, 0.0f, 1.0f
    };

    const unsigned int indices[] = {
        0, 1, 2,
        2, 3, 0
    };

    VAO vao;
    VBO vbo(pos, 4 * 4 * sizeof(float));
    VBOLayout layout;
    layout.Push<float>(2);
    layout.Push<float>(2);
    vao.AddBuffer(vbo, layout);

    IBO ibo(indices, 6);

    Shader shader("shader.vert", "shader.frag");
    shader.Bind();
    shader.SetUniform4f("u_Color", 0.7f, 0.3f, 0.1f, 1.0f);

    // glm::mat4 proj = glm::ortho(-2.0f, 2.0f, -1.5f, 1.5f, -1.0f, 1.0f);
    // // glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(-1.0f, 0.0f, 0.0f));
    // glm::mat4 view = glm::mat4(1.0f);
    // glm::mat4 model = glm::mat4(1.0f);
    // glm::mat4 mvp = proj * view * model;
    const float width = static_cast<float>(WIDTH) / static_cast<float>(HEIGHT);
    Matrix4f proj = Matrix4f::orthographic(-width, width, -1.0f, 1.0f, -1.0f, 1.0f);
    Matrix4f view = Matrix4f::identity();
    Matrix4f model = Matrix4f::identity().scale(Vector3f{1.5f, 1.0f, 1.0f});
    Matrix4f mvp = proj * view * model;
    shader.SetUniformMat4f("u_MVP", mvp);

    Texture texture1("pic1.png");
    Texture texture2("pic2.png");
    Texture texture3("pic3.png");
    texture1.Bind(0);
    texture2.Bind(1);
    texture3.Bind(2);
    shader.SetUniform1i("u_Texture1", 0); // number should match the currently bound texture slot!
    shader.SetUniform1i("u_Texture2", 1); // number should match the currently bound texture slot!

    vao.Unbind();
    vbo.Unbind();
    ibo.Unbind(); // XXX must come outside VAO's scope
    shader.Unbind();

    Renderer renderer;

    int curr = 0;
    float pics = 0.0f;
    float r = 0.4f;
    float step = 0.01f;
    float inc = 1.0f;
    while (!glfwWindowShouldClose(window)) {
        renderer.Clear();

        shader.Bind();
        float g = r + 0.4f;
        float b = r + 0.7f;
        if (g > 1.0f) g = 2.0f - g;
        if (b > 1.0f) b = 2.0f - b;
        shader.SetUniform4f("u_Color", r, g, b, pics);

        renderer.Draw(vao, ibo, shader);

        pics += step;
        if (pics >= 1.0f) {
            pics = 0.0f;
            curr++;
            shader.SetUniform1i("u_Texture1", curr % 3);
            shader.SetUniform1i("u_Texture2", (curr + 1) % 3);
        }

        r += inc * step;
        if (r >= 1.0f) {
            r = 1.0f;
            inc *= -1.0f;
        } else if (r <= 0.0f) {
            r = 0.0f;
            inc *= -1.0f;
        }

        glfwSwapBuffers(window);
        glfwPollEvents();
    }
